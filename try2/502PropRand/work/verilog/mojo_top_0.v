/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg low1,
    output reg low2,
    output reg low3,
    output reg high1,
    output reg high2,
    output reg high3,
    output reg [23:0] io_led
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [2-1:0] M_mypropogater_rowLit;
  wire [3-1:0] M_mypropogater_numOut;
  wire [1-1:0] M_mypropogater_row1;
  wire [1-1:0] M_mypropogater_row2;
  wire [1-1:0] M_mypropogater_row3;
  reg [1-1:0] M_mypropogater_rst;
  reg [3-1:0] M_mypropogater_num;
  propogate_2 mypropogater (
    .clk(clk),
    .rst(M_mypropogater_rst),
    .num(M_mypropogater_num),
    .rowLit(M_mypropogater_rowLit),
    .numOut(M_mypropogater_numOut),
    .row1(M_mypropogater_row1),
    .row2(M_mypropogater_row2),
    .row3(M_mypropogater_row3)
  );
  localparam GEN_state = 1'd0;
  localparam PROP_state = 1'd1;
  
  reg M_state_d, M_state_q = GEN_state;
  reg [31:0] M_seed_d, M_seed_q = 1'h0;
  wire [32-1:0] M_pn_gen_num;
  reg [1-1:0] M_pn_gen_rst;
  reg [1-1:0] M_pn_gen_next;
  reg [32-1:0] M_pn_gen_seed;
  pn_gen_3 pn_gen (
    .clk(clk),
    .rst(M_pn_gen_rst),
    .next(M_pn_gen_next),
    .seed(M_pn_gen_seed),
    .num(M_pn_gen_num)
  );
  reg [1:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_seed_d = M_seed_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_mypropogater_rst = rst;
    M_pn_gen_seed = M_seed_q;
    M_pn_gen_next = 1'h0;
    M_pn_gen_rst = rst;
    M_mypropogater_num = M_pn_gen_num[0+2-:3];
    high1 = M_mypropogater_row1;
    high2 = M_mypropogater_row2;
    high3 = M_mypropogater_row3;
    low1 = M_mypropogater_numOut[0+0-:1];
    low2 = M_mypropogater_numOut[1+0-:1];
    low3 = M_mypropogater_numOut[2+0-:1];
    led[3+4-:5] = 5'h00;
    io_led[0+0+0-:1] = M_mypropogater_row1;
    io_led[0+1+0-:1] = M_mypropogater_row2;
    io_led[0+2+0-:1] = M_mypropogater_row3;
    
    case (M_state_q)
      GEN_state: begin
        M_seed_d = M_seed_q + 1'h1;
        M_pn_gen_next = 1'h1;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q == 2'h3) begin
          M_pn_gen_rst = 1'h1;
          M_counter_d = 2'h0;
        end
        M_state_d = PROP_state;
      end
      PROP_state: begin
        M_pn_gen_next = 1'h0;
        if (M_mypropogater_rowLit == 2'h3) begin
          M_state_d = GEN_state;
        end else begin
          M_state_d = PROP_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_seed_q <= M_seed_d;
    M_counter_q <= M_counter_d;
    M_state_q <= M_state_d;
  end
  
endmodule
