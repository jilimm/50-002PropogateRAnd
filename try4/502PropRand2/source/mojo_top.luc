module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output high1,
    output high2,
    output high3,
    output low1,
    output low2,
    output low3
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst){
        counter slowclk(#SIZE(1),#DIV(25));
        //randNum random;        
      }
  }
  
  .clk(slowclk.value){
       .rst(rst){
    propogate mypropogater;
    register myreg;
    
     dff seed [32](#INIT(32b1)); //seed for pn_gen
    }
    pn_gen pn_gen;
   }
  
  always {
    seed.d = seed.q + 1;
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    led = pn_gen.num[2:0];
    myreg.data = pn_gen.num[2:0]; //hook up register with generator
    mypropogater.num=myreg.out;
    pn_gen.seed = seed.q;
    pn_gen.next = 0;
    pn_gen.rst=rst;
   // myreg.data = random.out;
    high1 = mypropogater.row1;
    high2 = mypropogater.row2;
    high3 = mypropogater.row3;
    low1 = mypropogater.numOut[0];
    low2 = mypropogater.numOut[1];
    low3 = mypropogater.numOut[2];
    
    if (mypropogater.rowLit==2b00){
      pn_gen.next=1;
      myreg.en=1;
      pn_gen.rst=1;
      }
    
    else{
      pn_gen.next=0;
      myreg.en=0;
//seed.d = seed.q + 1;
    }
    
    
    
  }
}